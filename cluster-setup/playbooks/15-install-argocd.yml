---
- name: Install ArgoCD using Helm
  hosts: master1
  become: yes
  gather_facts: yes
  
  vars:
    argocd_namespace: "argocd"
    argocd_repo_url: "https://argoproj.github.io/argo-helm"
    
  tasks:
    - name: Check if ArgoCD namespace already exists
      shell: kubectl get namespace {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_namespace_check
      failed_when: false
      
    - name: Display ArgoCD namespace status
      debug:
        msg: "ArgoCD namespace {{ 'already exists' if argocd_namespace_check.rc == 0 else 'does not exist' }}"
        
    - name: Create ArgoCD namespace
      shell: kubectl create namespace {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_namespace_create
      failed_when: false
      when: argocd_namespace_check.rc != 0
      
    - name: Display namespace creation result
      debug:
        msg: "ArgoCD namespace {{ 'created successfully' if (argocd_namespace_create is defined and argocd_namespace_create.rc == 0) else 'already exists' }}"
        
    - name: Check if ArgoCD Helm repository is already added
      shell: helm repo list | grep -q "argo"
      register: argocd_repo_check
      failed_when: false
      
    - name: Display ArgoCD repository status
      debug:
        msg: "ArgoCD Helm repository {{ 'already exists' if argocd_repo_check.rc == 0 else 'needs to be added' }}"
        
    - name: Add ArgoCD Helm repository
      shell: helm repo add argo {{ argocd_repo_url }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_repo_add
      failed_when: false
      when: argocd_repo_check.rc != 0
      
    - name: Display repository addition result
      debug:
        msg: "ArgoCD repository {{ 'added successfully' if (argocd_repo_add is defined and argocd_repo_add.rc == 0) else 'already exists or failed to add' }}"
        
    - name: Update Helm repositories
      shell: helm repo update
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: helm_repo_update
      failed_when: false
      
    - name: Display repository update result
      debug:
        msg: "Helm repository update {{ 'successful' if helm_repo_update.rc == 0 else 'failed' }}"
        
    - name: Check if ArgoCD is already installed
      shell: helm list -n {{ argocd_namespace }} | grep -q "argocd"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_install_check
      failed_when: false
      
    - name: Display ArgoCD installation status
      debug:
        msg: "ArgoCD {{ 'already installed' if argocd_install_check.rc == 0 else 'needs to be installed' }}"
        
    - name: Install ArgoCD using Helm
      shell: |
        helm install argocd argo/argo-cd \
          --namespace {{ argocd_namespace }} \
          --set server.insecure=true
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_install
      failed_when: false
      when: argocd_install_check.rc != 0
      
    - name: Display ArgoCD installation result
      debug:
        msg: "ArgoCD installation {{ 'successful' if (argocd_install is defined and argocd_install.rc == 0) else 'already installed' }}"
      
    - name: Wait for ArgoCD pods to be ready
      shell: kubectl get pods -n {{ argocd_namespace }} --no-headers | grep -v Running | wc -l
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_pods_not_ready
      until: argocd_pods_not_ready.stdout | int == 0
      retries: 30
      delay: 10
      failed_when: false
      
    - name: Display ArgoCD pods status
      debug:
        msg: "ArgoCD pods {{ 'are ready' if argocd_pods_not_ready.stdout | int == 0 else 'still starting up' }}"
        
    - name: Get ArgoCD pods status
      shell: kubectl get pods -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_pods_status
      failed_when: false
      
    - name: Display ArgoCD pods
      debug:
        var: argocd_pods_status.stdout_lines
      when: argocd_pods_status.stdout_lines is defined
      
    - name: Get ArgoCD services
      shell: kubectl get services -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_services
      failed_when: false
      
    - name: Display ArgoCD services
      debug:
        var: argocd_services.stdout_lines
      when: argocd_services.stdout_lines is defined
      
    - name: Get ArgoCD server NodePort
      shell: kubectl get service argocd-server -n {{ argocd_namespace }} -o jsonpath='{.spec.ports[0].nodePort}'
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_nodeport
      failed_when: false
      
    - name: Create ArgoCD Ingress
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server-ingress
          namespace: {{ argocd_namespace }}
          annotations:
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - argo.ochukowhoro.xyz
            secretName: argocd-tls-secret
          rules:
          - host: argo.ochukowhoro.xyz
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: argocd-server
                    port:
                      number: 443
        EOF
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_ingress_create
      failed_when: false
      
    - name: Display ArgoCD Ingress creation result
      debug:
        msg: "ArgoCD Ingress {{ 'created successfully' if argocd_ingress_create.rc == 0 else 'creation failed or already exists' }}"
      when: argocd_ingress_create is defined
      
    - name: Get ArgoCD initial admin password
      shell: kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_admin_password
      failed_when: false
      
    - name: Display ArgoCD admin password
      debug:
        msg: "ArgoCD Admin Password: {{ argocd_admin_password.stdout }}"
      when: argocd_admin_password is defined and argocd_admin_password.stdout is defined and argocd_admin_password.stdout != ""
      
    - name: Display installation completion
      debug:
        msg: |
          {{ inventory_hostname }}: ArgoCD installation completed successfully!
          
          ArgoCD Web UI:
          - URL: https://argo.ochukowhoro.xyz
          - Username: admin
          - Password: {{ argocd_admin_password.stdout if (argocd_admin_password is defined and argocd_admin_password.stdout is defined and argocd_admin_password.stdout != "") else 'Run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d' }}
          
          ArgoCD CLI:
          - Install CLI: Run playbook 16-install-argocd-cli.yml
          - Login: argocd login argo.ochukowhoro.xyz --insecure
          
          Note: The ingress uses a self-signed certificate by default.
          You may see a security warning in your browser.
