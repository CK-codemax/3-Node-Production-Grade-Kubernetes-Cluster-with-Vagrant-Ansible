---
- name: Test ArgoCD API Server Connection
  hosts: master1
  become: yes
  gather_facts: yes
  
  vars:
    argocd_namespace: "argocd"
    argocd_server_service: "argocd-server"
    
  tasks:
    - name: Check if ArgoCD CLI is installed
      command: argocd version --client
      register: argocd_cli_check
      failed_when: false
      
    - name: Fail if ArgoCD CLI is not installed
      fail:
        msg: "ArgoCD CLI is not installed. Please run playbook 11-install-argocd-cli.yml first"
      when: argocd_cli_check.rc != 0
      
    - name: Check if ArgoCD namespace exists
      shell: kubectl get namespace {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_namespace_check
      failed_when: false
      
    - name: Fail if ArgoCD namespace does not exist
      fail:
        msg: "ArgoCD namespace does not exist. Please run playbook 10-install-argocd.yml first"
      when: argocd_namespace_check.rc != 0
      
    - name: Check if ArgoCD server service exists
      shell: kubectl get service {{ argocd_server_service }} -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_service_check
      failed_when: false
      
    - name: Fail if ArgoCD server service does not exist
      fail:
        msg: "ArgoCD server service does not exist. Please run playbook 10-install-argocd.yml first"
      when: argocd_service_check.rc != 0
      
    - name: Get ArgoCD server NodePort
      shell: kubectl get service {{ argocd_server_service }} -n {{ argocd_namespace }} -o jsonpath='{.spec.ports[0].nodePort}'
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_nodeport
      failed_when: false
      
    - name: Display ArgoCD server NodePort
      debug:
        msg: "ArgoCD server NodePort: {{ argocd_nodeport.stdout if argocd_nodeport.rc == 0 else 'Unable to determine' }}"
        
    - name: Get master node internal IP
      shell: hostname -I | awk '{print $1}'
      register: master_internal_ip
      
    - name: Get master node public IP
      shell: curl -s http://169.254.169.254/latest/meta-data/public-ipv4
      register: master_public_ip
      failed_when: false
      
    - name: Display master node IPs
      debug:
        msg: |
          Master node IPs:
          - Internal IP: {{ master_internal_ip.stdout }}
          - Public IP: {{ master_public_ip.stdout if master_public_ip.rc == 0 else 'Not available' }}
        
    - name: Construct ArgoCD server URLs
      set_fact:
        argocd_server_url_internal: "{{ master_internal_ip.stdout }}:{{ argocd_nodeport.stdout }}"
        argocd_server_url_public: "{{ master_public_ip.stdout }}:{{ argocd_nodeport.stdout }}"
      when: argocd_nodeport.rc == 0
      
    - name: Display ArgoCD server URLs
      debug:
        msg: |
          ArgoCD server URLs:
          - Internal URL: {{ argocd_server_url_internal if argocd_server_url_internal is defined else 'N/A' }}
          - Public URL: {{ argocd_server_url_public if argocd_server_url_public is defined else 'N/A' }}
      when: argocd_server_url_internal is defined or argocd_server_url_public is defined
      
    - name: Test ArgoCD server connectivity (HTTP - Internal)
      uri:
        url: "http://{{ argocd_server_url_internal }}"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
      register: argocd_http_internal_test
      failed_when: false
      when: argocd_server_url_internal is defined
      
    - name: Test ArgoCD server connectivity (HTTP - Public)
      uri:
        url: "http://{{ argocd_server_url_public }}"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
      register: argocd_http_public_test
      failed_when: false
      when: argocd_server_url_public is defined
      
    - name: Test ArgoCD server connectivity (HTTPS - Internal)
      uri:
        url: "https://{{ argocd_server_url_internal }}"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
        validate_certs: false
      register: argocd_https_internal_test
      failed_when: false
      when: argocd_server_url_internal is defined
      
    - name: Test ArgoCD server connectivity (HTTPS - Public)
      uri:
        url: "https://{{ argocd_server_url_public }}"
        method: GET
        status_code: [200, 302, 404]
        timeout: 10
        validate_certs: false
      register: argocd_https_public_test
      failed_when: false
      when: argocd_server_url_public is defined
      
    - name: Display connectivity test results
      debug:
        msg: |
          ArgoCD connectivity tests:
          - HTTP Internal: {{ 'Success' if argocd_http_internal_test is defined and argocd_http_internal_test.status in [200, 302, 404] else 'Failed' }} ({{ argocd_http_internal_test.status if argocd_http_internal_test is defined else 'N/A' }})
          - HTTP Public: {{ 'Success' if argocd_http_public_test is defined and argocd_http_public_test.status in [200, 302, 404] else 'Failed' }} ({{ argocd_http_public_test.status if argocd_http_public_test is defined else 'N/A' }})
          - HTTPS Internal: {{ 'Success' if argocd_https_internal_test is defined and argocd_https_internal_test.status in [200, 302, 404] else 'Failed' }} ({{ argocd_https_internal_test.status if argocd_https_internal_test is defined else 'N/A' }})
          - HTTPS Public: {{ 'Success' if argocd_https_public_test is defined and argocd_https_public_test.status in [200, 302, 404] else 'Failed' }} ({{ argocd_https_public_test.status if argocd_https_public_test is defined else 'N/A' }})
      when: argocd_http_internal_test is defined or argocd_http_public_test is defined or argocd_https_internal_test is defined or argocd_https_public_test is defined
      
    - name: Get ArgoCD admin password
      shell: kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_admin_password
      failed_when: false
      
    - name: Display ArgoCD admin credentials
      debug:
        msg: |
          ArgoCD Admin Credentials:
          - Username: admin
          - Password: {{ argocd_admin_password.stdout if argocd_admin_password.rc == 0 else 'Unable to retrieve' }}
      when: argocd_admin_password.rc == 0 and argocd_admin_password.stdout != ""
      
    - name: Test ArgoCD CLI login (insecure mode - Internal)
      shell: |
        argocd login {{ argocd_server_url_internal }} --username admin --password "{{ argocd_admin_password.stdout }}" --insecure
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_cli_login_internal
      failed_when: false
      when: argocd_server_url_internal is defined and argocd_admin_password.rc == 0 and argocd_admin_password.stdout != ""
      
    - name: Test ArgoCD CLI login (grpc-web mode - Internal)
      shell: |
        argocd login {{ argocd_server_url_internal }} --username admin --password "{{ argocd_admin_password.stdout }}" --insecure --grpc-web
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_cli_login_grpc_internal
      failed_when: false
      when: argocd_server_url_internal is defined and argocd_admin_password.rc == 0 and argocd_admin_password.stdout != ""
      
    - name: Test ArgoCD CLI login (insecure mode - Public)
      shell: |
        argocd login {{ argocd_server_url_public }} --username admin --password "{{ argocd_admin_password.stdout }}" --insecure
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_cli_login_public
      failed_when: false
      when: argocd_server_url_public is defined and argocd_admin_password.rc == 0 and argocd_admin_password.stdout != ""
      
    - name: Test ArgoCD CLI login (grpc-web mode - Public)
      shell: |
        argocd login {{ argocd_server_url_public }} --username admin --password "{{ argocd_admin_password.stdout }}" --insecure --grpc-web
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_cli_login_grpc_public
      failed_when: false
      when: argocd_server_url_public is defined and argocd_admin_password.rc == 0 and argocd_admin_password.stdout != ""
      
    - name: Display ArgoCD CLI login results
      debug:
        msg: |
          ArgoCD CLI login tests:
          - Internal Insecure: {{ 'Success' if argocd_cli_login_internal.rc == 0 else 'Failed' }}
          - Internal GRPC-Web: {{ 'Success' if argocd_cli_login_grpc_internal.rc == 0 else 'Failed' }}
          - Public Insecure: {{ 'Success' if argocd_cli_login_public.rc == 0 else 'Failed' }}
          - Public GRPC-Web: {{ 'Success' if argocd_cli_login_grpc_public.rc == 0 else 'Failed' }}
      when: argocd_cli_login_internal is defined or argocd_cli_login_grpc_internal is defined or argocd_cli_login_public is defined or argocd_cli_login_grpc_public is defined
      
    - name: Test ArgoCD CLI version command after login
      shell: argocd version
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_version_test
      failed_when: false
      when: (argocd_cli_login_internal is defined and argocd_cli_login_internal.rc == 0) or (argocd_cli_login_public is defined and argocd_cli_login_public.rc == 0)
      
    - name: Display ArgoCD version information
      debug:
        var: argocd_version_test.stdout_lines
      when: argocd_version_test.stdout_lines is defined
      
    - name: Test ArgoCD CLI app list command
      shell: argocd app list
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_app_list
      failed_when: false
      when: (argocd_cli_login_internal is defined and argocd_cli_login_internal.rc == 0) or (argocd_cli_login_public is defined and argocd_cli_login_public.rc == 0)
      
    - name: Display ArgoCD applications
      debug:
        var: argocd_app_list.stdout_lines
      when: argocd_app_list.stdout_lines is defined
      
    - name: Test ArgoCD CLI repo list command
      shell: argocd repo list
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_repo_list
      failed_when: false
      when: (argocd_cli_login_internal is defined and argocd_cli_login_internal.rc == 0) or (argocd_cli_login_public is defined and argocd_cli_login_public.rc == 0)
      
    - name: Display ArgoCD repositories
      debug:
        var: argocd_repo_list.stdout_lines
      when: argocd_repo_list.stdout_lines is defined
      
    - name: Logout from ArgoCD CLI
      shell: argocd logout {{ argocd_server_url_internal if argocd_server_url_internal is defined else argocd_server_url_public }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: argocd_logout
      failed_when: false
      when: (argocd_cli_login_internal is defined and argocd_cli_login_internal.rc == 0) or (argocd_cli_login_public is defined and argocd_cli_login_public.rc == 0)
      
    - name: Display logout result
      debug:
        msg: "ArgoCD CLI logout: {{ 'Success' if argocd_logout.rc == 0 else 'Failed' }}"
      when: argocd_logout is defined and argocd_logout.rc is defined
